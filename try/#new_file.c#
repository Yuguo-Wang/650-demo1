#include <stdio.h>
#include <unistd.h>
#include <assert.h>


// point of a block is the tag (sizeof)
struct _block {
  struct _block * next;
  struct _block * prev;
  size_t blockSize;
};

typedef struct _block block;


unsigned long data_segment_size = 0; // sbrk space
unsigned long data_segment_free_space_size = 0; //rest space

block * headBlock = NULL; 


block * allocate(size_t size) {
  void * new = sbrk(size + sizeof(block));
  assert(new != (void*) - 1);
  block * last = new;
  last->next = NULL;
  last->prev = NULL;
  last->blockSize = size;
  data_segment_size += size + sizeof(block); //---

  // printf("new address is%p\n", new);
  // printf("finish allocate\n");
  return last;
}


block * split(block * ptr, size_t size){
  // printf("spint begin\n");

  block * newblock = (void*)ptr + size + sizeof(block);

  if (ptr->next){
    newblock->next = ptr->next;
    ptr->next->prev = newblock;
    
    ptr->next = newblock;
    newblock->prev = ptr;

    newblock->blockSize = ptr->blockSize - size - sizeof(block);
    ptr->blockSize = size;
  }
  else{
    ptr->next = newblock;
    newblock->prev = ptr;
    newblock->next = NULL;
    newblock->blockSize = ptr->blockSize - size - sizeof(block);
    ptr->blockSize = size;
  }

  // printf("finish split\n");  
  return ptr;
}



block * ff_find(size_t size){
  block * curr = headBlock;
  block * target = NULL;

  if (headBlock == NULL){
    return NULL;
  }
  else if (headBlock->blockSize > size){
    return headBlock;
  }
  else{
    while (curr && curr->blockSize < size){
      // find the memory
      curr = curr->next;
      target = curr;
    }
    return target;
  }
}

void removeBlock(block * ptr){
  if (ptr->prev && ptr->next){
    ptr->prev->next = ptr->next;
    ptr->next->prev = ptr->prev;
    ptr->prev = NULL;
    ptr->next = NULL;
  }
  else if (ptr->prev == NULL && ptr->next){
    block * new = ptr->next;
    ptr->next->prev = NULL;
    ptr->next = NULL;
    headBlock = new;
  }
  else if (ptr->prev && ptr->next == NULL){
    ptr->prev->next = NULL;
    ptr->prev = NULL;
  }
  else{
    headBlock = NULL;
  }
}

void * ff_malloc(size_t size){
  
  block * ptr = NULL;
  
  if (headBlock == NULL){
    ptr = allocate(size);
    headBlock = ptr;
  }
  else{
    ptr = ff_find(size); // >size or NULL

    if (ptr == NULL){
      ptr = allocate(size);  
    }
    else if (ptr->blockSize > size + sizeof(block)){
      ptr = split(ptr, size);
      removeBlock(ptr);
    }

    else if(ptr->blockSize > size && ptr->blockSize <= size + sizeof(block)){
      removeBlock(ptr);
    }
  }
  // printf("finish ff_malloc\n");

  return (void*)ptr + sizeof(block); // for user
}


void merge(block * ptr){

  ptr->blockSize += ptr->next->blockSize + sizeof(block);
  remove(ptr->next);

  // printf("finish merge\n");
}


void ff_free(void * ptr){

  // no freelist at the beginning
  if (headBlock == NULL){

    headBlock = (void*)ptr - sizeof(block);
    headBlock->next = NULL;
    headBlock->prev = NULL;

  }
  else{
    // first block
    block * curr = headBlock;

    // last block
    block * currlast = headBlock;
    while (currlast->next){
      currlast = currlast->next;
    }

    // add block
    block * newblock = (void*)ptr - sizeof(block);

    // add before headBlock
    if (curr > newblock){
      newblock->next = curr;
      curr->prev = newblock;
      headBlock = newblock;
      newblock->prev = NULL;
    }

    // add behind lastBlock
    else if (currlast < newblock){
      currlast->next = newblock;
      newblock->prev = currlast;
      newblock->next = NULL;
    } 

    // add in the middle
    else{

      while (curr != currlast && curr < newblock){ 
        curr = curr->next;
      }
      
      curr = curr ->prev;
      newblock->prev = curr;
      curr->next->prev = newblock;
      newblock->next = curr->next;
      curr->next = newblock;
    }

    // merge the free blocks
    if (
      (newblock->prev && (void *)newblock == (void *)newblock->prev + newblock->prev->blockSize + sizeof(block)) &&
      ((newblock->next && (void *)newblock->next > (void *)newblock + newblock->blockSize + sizeof(block)) || newblock->next == NULL)){

        merge(newblock->prev);
        // printf("finish merge left\n");
    }
    else if(
      (newblock->next && (void *)newblock->next == (void *)newblock + newblock->blockSize + sizeof(block)) &&
      ((newblock->prev && (void *)newblock > (void *)newblock->prev + newblock->prev->blockSize + sizeof(block)) || newblock->prev == NULL)){

        merge(newblock);
        // printf("finish merge right\n");
    }

    else if (
      newblock->prev &&
      newblock->next && 
      (void *)newblock == (void *)newblock->prev + newblock->prev->blockSize + sizeof(block) &&
      (void *)newblock->next == (void *)newblock + newblock->blockSize + sizeof(block)){
        
        block * now = newblock->prev;
        merge(newblock->prev);
        merge(now);
        // printf("finish merge left and right\n");
    }


  }
  block * freehead = headBlock;
  while (freehead){
    // printf("address and size are %p and %ld\n", (void*)freehead, freehead->blockSize);
    data_segment_free_space_size += freehead->blockSize + sizeof(block);
    freehead = freehead->next;
  }


  // printf("finish ff_free\n");
}


unsigned long get_data_segment_size(){
  return data_segment_size;
}

unsigned long get_data_segment_free_space_size(){
  return data_segment_free_space_size;
}



#include <stdlib.h>
#include <stdio.h>
#include <time.h>


#define NUM_ITERS    10 //100
#define NUM_ITEMS    100 //10000


#define MALLOC(sz) ff_malloc(sz)
#define FREE(p)    ff_free(p)

#ifdef BF
#define MALLOC(sz) bf_malloc(sz)
#define FREE(p)    bf_free(p)
#endif


double calc_time(struct timespec start, struct timespec end) {
  double start_sec = (double)start.tv_sec*1000000000.0 + (double)start.tv_nsec;
  double end_sec = (double)end.tv_sec*1000000000.0 + (double)end.tv_nsec;

  if (end_sec < start_sec) {
    return 0;
  } else {
    return end_sec - start_sec;
  }
};


struct malloc_list {
  size_t bytes;
  int *address;
};
typedef struct malloc_list malloc_list_t;

malloc_list_t malloc_items[2][NUM_ITEMS];

unsigned free_list[NUM_ITEMS];


int main(int argc, char *argv[])
{
  int i, j, k;
  unsigned tmp;
  unsigned long data_segment_size;
  unsigned long data_segment_free_space;
  struct timespec start_time, end_time;

  srand(0);

  const unsigned chunk_size = 32;
  const unsigned min_chunks = 4;
  const unsigned max_chunks = 16;
  for (i=0; i < NUM_ITEMS; i++) {
    malloc_items[0][i].bytes = ((rand() % (max_chunks - min_chunks + 1)) + min_chunks) * chunk_size;
    malloc_items[1][i].bytes = ((rand() % (max_chunks - min_chunks + 1)) + min_chunks) * chunk_size;
    free_list[i] = i;
  } //for i

  i = NUM_ITEMS;
  while (i > 1) {
    i--;
    j = rand() % i;
    tmp = free_list[i];
    free_list[i] = free_list[j];
    free_list[j] = tmp;
  } //while


  for (i=0; i < NUM_ITEMS; i++) {
    malloc_items[0][i].address = (int *)MALLOC(malloc_items[0][i].bytes);
  } //for i


  //Start Time
  clock_gettime(CLOCK_MONOTONIC, &start_time);

  for (i=0; i < NUM_ITERS; i++) {
    unsigned malloc_set = i % 2;
    for (j=0; j < NUM_ITEMS; j+=50) {
      for (k=0; k < 50; k++) {
	unsigned item_to_free = free_list[j+k];
	FREE(malloc_items[malloc_set][item_to_free].address);
      } //for k
      for (k=0; k < 50; k++) {
	malloc_items[1-malloc_set][j+k].address = (int *)MALLOC(malloc_items[1-malloc_set][j+k].bytes);
      } //for k
    } //for j
  } //for i

  //Stop Time
  clock_gettime(CLOCK_MONOTONIC, &end_time);

  data_segment_size = get_data_segment_size();
  data_segment_free_space = get_data_segment_free_space_size();
  printf("data_segment_size = %lu, data_segment_free_space = %lu\n", data_segment_size, data_segment_free_space);

  double elapsed_ns = calc_time(start_time, end_time);
  printf("Execution Time = %f seconds\n", elapsed_ns / 1e9);
  printf("Fragmentation  = %f\n", (float)data_segment_free_space/(float)data_segment_size);

  for (i=0; i < NUM_ITEMS; i++) {
    FREE(malloc_items[0][i].address);
  } //for i

  return 0;
}





